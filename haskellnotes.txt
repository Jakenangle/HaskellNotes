types
Bool
	True
	False
	case sensitive
||
&&
not
==
/=

exOr:: (Bool, Bool)->Bool
exOr(a, b) = (a && not b) || (not a && b)

2^3
-
div
mod
as
negate

guards

in book 3.7-indentation


where keyword

data Bool = False|True

Chapter 5
tuple
	(Float, Integer, String)

fst- fst(a,b) = a
snd- snd(a,b) = b

--lists
[Integer]
[] -- empty list
[1]
[1,3,5] == 1:2:5:[] --cons
[5,3,1]
[1..5]=1:2:3:4:5:[]
[10,8..2]=[10,8,6,4,2]--take difference than use that as adjustment

--list compehension
[2*n|n<-[1..10]] = [2,4,6,8,10,12,14,16,18,20]
[(m,n)|n<-[1..10], m<-['a'..'z']]
[n|n<-[1..100], isEven n]--a test, isEven returns Bool

--list functions
(:)::a->[a]->[a]
(++) :: [a] -> [a] -> [a]--append two lists together
[1..3]++[1..3]=[1,2,3,1,2,3

foo:: a -> [a]->[a]
foo a [] = [a]
foo x (a:b) = a : foo x b

(++) [] [] = []
(++) [] [a:b] = [a:b]
(++) [a:b] [] = [a:b]
(++) (a:b) (c:d) = (++) (foo c (a:b)) d
O(n*m)

(!!) :: [a] -> Int -> a
[10,9..1]!!3=7

.lhs--everyting is a comment unless you say otherwise "> code here"

length::[a]->Int
length[] = 0
length[a..b]= 1 + length b

replicate::Int->a->[a]
replicate 3 1 = [1,1,1]
replicate 3 [1] = [[1],[1],[1]]
replicate 3 'c' = ['c','c','c'] = "ccc"
replicate 3 "foo" = ["foo","foo","foo"]

Higher order function
map
sumL[1..10]=55

Filter
[1..10]